#!/usr/bin/env node

const app = require("../app");
const debug = require("debug")("autofarm:server");
const http = require("http");
const cron = require('node-cron');

const normalizePort = (val) => {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
};

const onError = (error) => {
  if (error.syscall !== "listen") throw error;

  let bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
    default:
      throw error;
  }
};

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
};

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

const server = http.createServer(app);

cron.schedule('0 8 */4 * *', () => {
  http.request({ host: 'farm.akfn.net', path: '/pump-off' }).end();
  db.pool.query('INSERT INTO usagelog (idequipment, idlocation, status, createdBy) values (?,?,?,?)', [2, 1, 'on', 1]);
}, { scheduled: !0 });

cron.schedule('1 8 */4 * *', () => {
  http.request({ host: 'farm.akfn.net', path: '/pump-on' }).end();
  db.pool.query('INSERT INTO usagelog (idequipment, idlocation, status, createdBy) values (?,?,?,?)', [2, 1, 'off', 1]);
}, { scheduled: !0 });

cron.schedule('0 8 * * *', () => {
  http.request({ host: 'farm.akfn.net', path: '/light-off' }).end();
  db.pool.query('INSERT INTO usagelog (idequipment, idlocation, status, createdBy) values (?,?,?,?)', [1, 1, 'on', 1]);
}, { scheduled: !0 });

cron.schedule('0 23 * * *', () => {
  http.request({ host: 'farm.akfn.net', path: '/light-on' }).end();
  db.pool.query('INSERT INTO usagelog (idequipment, idlocation, status, createdBy) values (?,?,?,?)', [1, 1, 'off', 1]);
}, { scheduled: !0 });

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
